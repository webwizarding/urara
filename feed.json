{"version":"https://jsonfeed.org/version/1.1","title":"Poly","home_page_url":"https://urara-demo.netlify.app","feed_url":"https://urara-demo.netlify.app/feed.json","description":"Powered by SvelteKit/Urara","icon":"https://urara-demo.netlify.app/assets/any@512.png","favicon":"https://urara-demo.netlify.app/favicon.png","authors":[{"name":"https","url":"https://urara-demo.netlify.app","avatar":"/assets/avatar.png"}],"language":"en-US","items":[{"id":"torvulns","url":"https://urara-demo.netlify.app/torvulns","title":"Tor Vulnerabilities","content_html":"<h1 id=\"post\" data-svelte-h=\"svelte-o3h0hg\"><a href=\"#post\">POST</a></h1> <p data-svelte-h=\"svelte-122xy6d\">This post will go through the vulnerabilites of tor/torbrowser, onion balance and the stem library.The vulnerabilties may not directly affect the onion relay protocol but nontheless Tor is not entirely secure.</p> <hr> <h2 id=\"tortorbrowser\" data-svelte-h=\"svelte-pv46f1\"><a href=\"#tortorbrowser\">Tor/TorBrowser</a></h2> <p data-svelte-h=\"svelte-1n2ga7t\">The Tor/Torbrowser in total have 41 combined found vulnerabiltiesWe will only be going over the important vulns I think is interesting</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>‎scripts/test/appveyor-irc-notify.py</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-1qxdgup\">CWE-327 (<a href=\"https://cwe.mitre.org/data/definitions/327.html\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">https://cwe.mitre.org/data/definitions/327.html</a>)Calling to a deprecated function like ssl.wrap_socket doesnt entirely specify the protocol and can result in an insecure default being usedSome ways we can try preventing this is avoiding calling ssl.wrap_socket without specifying the ssl_version</p> <p data-svelte-h=\"svelte-o419uc\">Using ssl.wrap_socket without specifying the ssl_version can lead to an outdated and weak security protocol It’s crucial to encrypt sensitive data for protection Encryption standards need to stay current because attackers keep getting better at breaking them So your encryption should always be up to date and strong enough for the type of data you have</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>‎scripts/maint/add_c_file.py</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-1y735x9\">CWE-23 (<a href=\"https://cwe.mitre.org/data/definitions/23.html\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">https://cwe.mitre.org/data/definitions/23.html</a>)Unsanitized input from a command line argument flows into open where it used as a path so it can become a path traversal vulnerability that can allow someone to write arbitrary filesWith a vulnerability like this we can do something known as a directory traversal attack which main purpose is to access files and directories that are stored outside the intended folderIn this example it is a Zip-Slip type vulnerability that allows us to create and replace existing files which we can use something like this</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-spqj5s\">That will allow use to leak the private key of root and then using a malicious zip archive that holds path traversal filenames then when the zip archive is extracted it will result in traversing out the target folder and ending up in a /root/.ssh/ directory for example</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>torbrowser_launcher/common.py</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-4uxdzl\">CWE-502 (<a href=\"https://cwe.mitre.org/data/definitions/502.html\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">https://cwe.mitre.org/data/definitions/502.html</a>)</p> <p data-svelte-h=\"svelte-jfmawv\">Unsantized input from a command line argument flows into pickle.load where it can result in unsafe deserialization vulnsThe vulnerability that can be found here is a process of converting an object into a sequence of bytes that can persist to a disk or database that can be sent through streams</p> <hr> <h2 id=\"onionbalance-v3\" data-svelte-h=\"svelte-1bnvcow\"><a href=\"#onionbalance-v3\">Onionbalance V3</a></h2> <p data-svelte-h=\"svelte-1icy0ok\">This has a total of 20 reps and its primary function is to allow tor onion service requests to be distributed across multiple backend tor instancesand it provides load balancing while also making onion services more resilient and reliable by elimating single points of failure</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>versioneer.py:393</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-pk751r\">CWE-78 (<a href=\"https://cwe.mitre.org/data/definitions/78.html\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">https://cwe.mitre.org/data/definitions/78.html</a>)Unsanitized input from command line argument flows into subprocess.popen that can result in a command injection vulnerabilityThe vulnerability can be done by using an OS command injection attack that allows users to pass commands directly to the system shell attached to a legit request</p> <hr> <h2 id=\"stem-python-tor-library\" data-svelte-h=\"svelte-1dvvl1s\"><a href=\"#stem-python-tor-library\">Stem (Python Tor Library)</a></h2> <p data-svelte-h=\"svelte-1g2u0we\">This rep has 27 vulnerabilitiesStem is a Python controller library for Tor With it you can use Tor’s control protocol to script against the Tor process or build things such as Nyx</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>docs/_static/example/words_with.py</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-llxhxi\">CWE-400 (<a href=\"https://cwe.mitre.org/data/definitions/400.html\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">https://cwe.mitre.org/data/definitions/400.html</a>)User input from user input flows into re.compile can have a result of a ReDOS vulnThis vulnerability is mainly surrounded around the regex engine that uses regular expressions to make a system inaccessible to usersIt can be done by using a regex regular expression string that includes 14 C’s that the engine needs to take over 65k steps just to see if the string is a valid stringit will cause the CPU to be overloaded and work very slowly becoming a DOS</p> <hr>","image":"/torvulns/torwindow.png","date_published":"2023-11-27T00:00:00.000Z","date_modified":"2021-11-27T00:00:00.000Z","tags":["Hello World"],"_indieweb":{"type":"article"}},{"id":"roblox osint","url":"https://urara-demo.netlify.app/roblox osint","title":"Roblox Osint","content_html":"<h1 id=\"post\" data-svelte-h=\"svelte-o3h0hg\"><a href=\"#post\">POST</a></h1> <h2 id=\"roblox\" data-svelte-h=\"svelte-9o4odt\"><a href=\"#roblox\">ROBLOX?</a></h2> <p data-svelte-h=\"svelte-1vyh2n6\">What information can we pull from a normal user on a roblox game? lets get into it</p> <p data-svelte-h=\"svelte-fxw89l\">*This topic was researched a while ago so it may not be applicable but its nice to knowShort post too!!!</p> <hr> <h3 id=\"general-location-finding\" data-svelte-h=\"svelte-slhru4\"><a href=\"#general-location-finding\">General Location Finding</a></h3> <p data-svelte-h=\"svelte-bqzsps\">We can actually pull information on the device to find out where the user is generallyBy using the ‘GetCountryRegionForPlayerAsync’ it already gives us a general Country/Region in which the user is fromTo continue this triangulation of the user we can also use ‘PolyService:GetPolicyInfoForPlayerAsync()’to be able to “returns policy information about a player which is based on geolocation, age group and platform”This can give us many things like if the player can interact with paid random item generators, if they can see social media links,if they can trade virtual items and if they are subject to chinese policies can give us even more hints where the user is from</p> <p data-svelte-h=\"svelte-1e7c91d\">The even crazy thing is that we are also able to use ‘DeviceGravityChanged’ which is able to detect if the force of gravitychanges on the devices accelerometer, this can also be done to detect gravitational anomalies that allow us to trianglate a closerarea to where they are depending on earthse gravity field anomalies depending on miligals (-50 to 50)</p> <hr> <h3 id=\"user-data\" data-svelte-h=\"svelte-1xdldff\"><a href=\"#user-data\">User Data</a></h3> <p data-svelte-h=\"svelte-moow2k\">We are able to utilize roblox’s api to retreive account information, Metadata, Phone Information, Promotion Channel, StarCodeAffliate, Roblox badgesand Email InformationThis is vital to find out more about the userTo be able to have this work we must use the ‘HttpService’ to be intertwined with the roblox account api</p> <p data-svelte-h=\"svelte-b8ffp6\">Another small thing I want to mention is the ‘UserInputService’ that is able to give us information about the detection and capture of different types of inputfrom the users device</p> <hr> <h3 id=\"sources\" data-svelte-h=\"svelte-177vmny\"><a href=\"#sources\">SOURCES</a></h3> <!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>https://developer.roblox.com/en-us/api-reference/class/UserInputService</div><div class='line'>https://developer.roblox.com/en-us/api-reference/lua-docs/os</div><div class='line'>https://developer.roblox.com/en-us/api-reference/class/LocalizationService</div><div class='line'>https://developer.roblox.com/en-us/api-reference/class/HttpService</div><div class='line'>https://developer.roblox.com/en-us/api-reference/function/LocalizationService/GetCountryRegionForPlayerAsync</div><div class='line'>https://developer.roblox.com/en-us/api-reference/class/UserInputService</div><div class='line'>https://accountinformation.roblox.com/docs#!/PhoneInformation/post_v1_phone</div></code></div></pre><!-- HTML_TAG_END --> <hr>","image":"/roblox osint/0.png","date_published":"2023-11-23T00:00:00.000Z","date_modified":"2021-11-23T00:00:00.000Z","tags":["Hello World"],"_indieweb":{"type":"article"}},{"id":"Argonhosting","url":"https://urara-demo.netlify.app/Argonhosting","title":"Argonhosting investigation","content_html":"<h1 id=\"post\" data-svelte-h=\"svelte-o3h0hg\"><a href=\"#post\">POST</a></h1> <h3 id=\"summary\" data-svelte-h=\"svelte-18k4ho8\"><a href=\"#summary\">Summary:</a></h3> <p data-svelte-h=\"svelte-3gz5lt\">Argonhosting is a cheap hosting service that advertises powerful ddos protection, good security, and good hosting</p> <h3 id=\"drama\" data-svelte-h=\"svelte-1urgy2n\"><a href=\"#drama\">Drama:</a></h3> <p data-svelte-h=\"svelte-1yevpuk\">They claim their billing page is customized by them but its just a premade one from something like stripeOn their discord, they display that their hosting is by them but discovering behind their website hosting and a client Minecraft server hosting it reveals they resell hosturly serversUpdates will follow…</p> <p data-svelte-h=\"svelte-1nn6qod\">Vulns below have supposedly been fixed but no sign of any damage control has been done but the covering up of these vulnerabilities</p> <hr> <h3 id=\"mistake-1-ip-history\" data-svelte-h=\"svelte-1fkiefi\"><a href=\"#mistake-1-ip-history\">MISTAKE 1 Ip history</a></h3> <p data-svelte-h=\"svelte-1byblie\">They tried protecting their server by putting cloudflare UAM on it but it makes no difference because we are able to look up the IP History of the domain and you can clearly see the origin server that hosted the server before cloudflare was put on</p> <hr> <h3 id=\"mistake-2-ufw\" data-svelte-h=\"svelte-1rj2gce\"><a href=\"#mistake-2-ufw\">MISTAKE 2 UFW</a></h3> <p data-svelte-h=\"svelte-11cs6yc\">They didn’t enable UFW so the host/domain can easily be found with related servers including the origin serversThis allows us to get a lot of information of the host without doing any work but if it had UFW properly setup it would be a different story</p> <hr> <h3 id=\"mistake-3-mariadb\" data-svelte-h=\"svelte-1d5ybj5\"><a href=\"#mistake-3-mariadb\">MISTAKE 3 MariaDB</a></h3> <p data-svelte-h=\"svelte-mezn6c\">Going back to the UFW mistake we can find the server that contains the databaseWith finding the server we can portscan or find the port that receives the database information/OS informationIn this instance we made a special request to get the information of the server which came to this</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>3306 / TCP</div><div class='line'>MariaDB10.6.12-MariaDB-0ubuntu0.22.04.1</div><div class='line'>MariaDB:</div><div class='line'>  Protocol Version: 10</div><div class='line'>  Version: 10.6.12-MariaDB-0ubuntu0.22.04.1</div><div class='line'>  Capabilities: 63486</div><div class='line'>  Server Language: 45</div><div class='line'>  Server Status: 2</div><div class='line'>  Extended Server Capabilities: 33279</div><div class='line'>  Authentication Plugin: mysql_native_password</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-11uv4fi\">MariaDB is a fork of MySQL as MySQL is quite old so it still has the same exploits or vulnerabilitiesA vulnerability we can exploit is a mariaDB/MySQL DB password brute force which looks like this</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>Warning: MaxLen = 8 is too large for the current hash type, reduced to 5</div><div class='line'>words: 16382  time: 0:00:00:02  w/s: 6262  current: citcH</div><div class='line'>words: 24573  time: 0:00:00:04  w/s: 4916  current: rap</div><div class='line'>words: 40956  time: 0:00:00:07  w/s: 5498  current: matc3</div><div class='line'>words: 49147  time: 0:00:00:09  w/s: 5030  current: 4429</div><div class='line'>words: 65530  time: 0:00:00:12  w/s: 5354  current: ch141</div><div class='line'>words: 73721  time: 0:00:00:14  w/s: 5021  current: v3n</div><div class='line'>words: 90104  time: 0:00:00:17  w/s: 5277  current: pun2</div><div class='line'>[*] Cracked! --&gt; pass</div><div class='line'>words: 98295  time: 0:00:00:18  w/s: 5434  current: 43gs</div><div class='line'>Session aborted</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-lpi9ow\">The other vulnerabilities are as listed (MariaDB/MySQL Related):CVE:2012-5627CVE:2013-1861</p> <hr> <h3 id=\"mistake-4-common-vulns\" data-svelte-h=\"svelte-yf6p3n\"><a href=\"#mistake-4-common-vulns\">MISTAKE 4 Common Vulns</a></h3> <p data-svelte-h=\"svelte-1rtdrhy\">Returning to the fact the origin server and host related servers are exposed you can find CVE’s that are related to the hardware or server</p> <p data-svelte-h=\"svelte-1mzovkm\">These are the CVE’s they’re vulnerable to:CVE-2021-23017CVE-2021-3618</p>","image":"/roblox osint/polyc2.png","date_published":"2023-08-11T00:00:00.000Z","date_modified":"2021-08-11T00:00:00.000Z","tags":["Hello World"],"_indieweb":{"type":"article"}},{"id":"zeromqprot","url":"https://urara-demo.netlify.app/zeromqprot","title":"The ZeroMQ Protocol","content_html":"<h1 id=\"why-use-zeromq\" data-svelte-h=\"svelte-1mr6j2f\"><a href=\"#why-use-zeromq\">WHY USE ZEROMQ??</a></h1> <p data-svelte-h=\"svelte-1xuc0mr\"><a href=\"https://zeromq.org/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">https://zeromq.org/</a></p> <hr> <h3 id=\"speed-and-performance\" data-svelte-h=\"svelte-2z03do\"><a href=\"#speed-and-performance\">Speed and performance:</a></h3> <p data-svelte-h=\"svelte-gxoj0\">Zeromq is a very low-level fast asynchronous messaging library that can handle large amounts of connections and requests under seconds. It was able to get a transfer rate of 10,000 messages per 15 milliseconds, or between 66,000 and 70,000 messages/s under low-latency and it was able to beat rabbitmq , kafka and many other network libraries. ZeroMq fast transfer rates and handling along with golang’s effecient concurency and multithreading will make the C2 faster than ever</p> <hr> <h3 id=\"lightweight-and-efficient\" data-svelte-h=\"svelte-fjgjn2\"><a href=\"#lightweight-and-efficient\">Lightweight and Efficient:</a></h3> <p data-svelte-h=\"svelte-191kaok\">zeromq lightweight and low level library made in C++ uses as little resources as possible while maintaining the best performance</p> <hr> <h3 id=\"security\" data-svelte-h=\"svelte-18jtoek\"><a href=\"#security\">Security:</a></h3> <p data-svelte-h=\"svelte-1a0qq79\">zeromq uses CurveZMQ which is an authentication and encryption protocol for ZeroMQ. This can be used to authenticate and encrypt C2 comms fending off network analyst. Zeromq also uses zmtp which is special type of protocol used for communication.</p> <hr> <h3 id=\"load-balancing-\" data-svelte-h=\"svelte-17gu50h\"><a href=\"#load-balancing-\">Load balancing :</a></h3> <p data-svelte-h=\"svelte-13rl8r7\">ZeroMq has a builtin load balancer, more workers will increase performance in the cost of resources.</p> <hr> <p data-svelte-h=\"svelte-1icstv2\">PolyC2’s Webserver and API will be handled by socketify.</p> <p data-svelte-h=\"svelte-np9cf\"><a href=\"https://github.com/cirospaciari/socketify.py\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">https://github.com/cirospaciari/socketify.py</a></p> <p data-svelte-h=\"svelte-1viigyq\">Socketfiy is focussed on speed and simplicity , and its easy for developers to configure and use socketify. Socketfiy is very fast and faster than gin(golang), fiber(golang), django and fastapi. Socketify pypy3 is able to handle lots of requests per seconds and send over millions of request per seconds. Socketify makes it the ultimate web framework for C2 api and webservers.</p> <hr>","image":"/zeromqprot/0mq0.png","date_published":"2023-08-06T00:00:00.000Z","date_modified":"2021-08-06T00:00:00.000Z","tags":["Hello World"],"_indieweb":{"type":"article"}}]}